{
  "address": "0x7ac16FeF7051171ed93f8cf550aF4F68c80FFf61",
  "abi": [
    {
      "inputs": [],
      "name": "MintpegFactory__InvalidMintpegImplementation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "royaltyFee",
          "type": "uint96"
        }
      ],
      "name": "MintpegCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintpegImplementation",
          "type": "address"
        }
      ],
      "name": "SetMintpegImplementation",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMintpegs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "createMintpeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdMintpegs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_createdMintpegIndex",
          "type": "uint256"
        }
      ],
      "name": "getMintpegCreatedAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "getNumberOfMintpegsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMintpegsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintpegImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintpegImplementation",
          "type": "address"
        }
      ],
      "name": "setMintpegImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe54a28c942fb08b92f6554fd35f02fe377fcda025dfdd36475a0decccbd36576",
  "receipt": {
    "to": null,
    "from": "0xb2052Eb9730b6AfEc7ae47B5bfFE492c0c0E511b",
    "contractAddress": "0x7ac16FeF7051171ed93f8cf550aF4F68c80FFf61",
    "transactionIndex": 0,
    "gasUsed": "1039781",
    "logsBloom": "0x
    "blockHash": "0xa51807e4721879db2b23c201ffce4e4b2969adcec7270126335bb156f4a44d55",
    "transactionHash": "0xe54a28c942fb08b92f6554fd35f02fe377fcda025dfdd36475a0decccbd36576",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11922202,
        "transactionHash": "0xe54a28c942fb08b92f6554fd35f02fe377fcda025dfdd36475a0decccbd36576",
        "address": "0x7ac16FeF7051171ed93f8cf550aF4F68c80FFf61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2052eb9730b6afec7ae47b5bffe492c0c0e511b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa51807e4721879db2b23c201ffce4e4b2969adcec7270126335bb156f4a44d55"
      }
    ],
    "blockNumber": 11922202,
    "cumulativeGasUsed": "1039781",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "777dfce61219798765028dc4a0545cbe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MintpegFactory__InvalidMintpegImplementation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"}],\"name\":\"MintpegCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintpegImplementation\",\"type\":\"address\"}],\"name\":\"SetMintpegImplementation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMintpegs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"createMintpeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdMintpegs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_createdMintpegIndex\",\"type\":\"uint256\"}],\"name\":\"getMintpegCreatedAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"getNumberOfMintpegsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMintpegsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintpegImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintpegImplementation\",\"type\":\"address\"}],\"name\":\"setMintpegImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"events\":{\"MintpegCreated(address,string,string,address,address,uint96)\":{\"params\":{\"mintpeg\":\"Address of deployed mintpeg\",\"name\":\"Mintpeg (ERC721) name\",\"projectOwner\":\"The project owner\",\"royaltyFee\":\"Royalty fee numerator\",\"royaltyReceiver\":\"Royalty fee collector\",\"symbol\":\"Mintpeg (ERC721) symbol\"}},\"SetMintpegImplementation(address)\":{\"params\":{\"mintpegImplementation\":\"implementation of mintpeg\"}}},\"kind\":\"dev\",\"methods\":{\"createMintpeg(string,string,address,uint96)\":{\"params\":{\"_feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"_name\":\"ERC721 name\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"}},\"getMintpegCreatedAtIndex(address,uint256)\":{\"details\":\"Should be used with getNumberOfMintpegsCreated() to prevent running into out-of-range index errors\",\"params\":{\"_createdMintpegIndex\":\"Index of Mintpeg to be returned\",\"_deployer\":\"Address of mintpeg(s) deployer\"},\"returns\":{\"_0\":\"address Address of the Mintpeg implementation at given index\"}},\"getNumberOfMintpegsCreated(address)\":{\"params\":{\"_deployer\":\"Address of mintpeg(s) deployer\"}},\"getTotalMintpegsCount()\":{\"returns\":{\"_0\":\"uint256 number of all mintpegs deployed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMintpegImplementation(address)\":{\"params\":{\"_mintpegImplementation\":\"New mintpegImplementation\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Mintpeg Factory\",\"version\":1},\"userdoc\":{\"events\":{\"MintpegCreated(address,string,string,address,address,uint96)\":{\"notice\":\"Emitted on createMintpeg()\"},\"SetMintpegImplementation(address)\":{\"notice\":\"Emmited on setMintpegImplementation()\"}},\"kind\":\"user\",\"methods\":{\"allMintpegs(uint256)\":{\"notice\":\"Array of all deployed mintpeg addresses\"},\"createMintpeg(string,string,address,uint96)\":{\"notice\":\"Function for creating mintpegs\"},\"createdMintpegs(address,uint256)\":{\"notice\":\"Mapping of adresses (deployer) to created mintpegs\"},\"getMintpegCreatedAtIndex(address,uint256)\":{\"notice\":\"Function to get address of deployed mintpeg at given index\"},\"getNumberOfMintpegsCreated(address)\":{\"notice\":\"Function to get number of mintpegs deployed by an address\"},\"getTotalMintpegsCount()\":{\"notice\":\"Function to get number of mintpegs deployed\"},\"mintpegImplementation()\":{\"notice\":\"Mintpeg contract to be cloned\"},\"setMintpegImplementation(address)\":{\"notice\":\"Set address for mintpegImplementation\"}},\"notice\":\"Factory that creates Mintpeg contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintpegFactory.sol\":\"MintpegFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MintpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nerror Mintpeg__InvalidRoyaltyInfo();\\nerror Mintpeg__InvalidProjectOwner();\\nerror Mintpeg__InvalidTokenOwner();\\nerror MintpegFactory__InvalidMintpegImplementation();\\n\",\"keccak256\":\"0xcf703964253f7f75b1c92aed9f48e15463440c0a4df999504a6f1a3f48e3d05d\",\"license\":\"MIT\"},\"contracts/MintpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./MintpegErrors.sol\\\";\\nimport \\\"./interfaces/IMintpeg.sol\\\";\\n\\n/// @title Mintpeg Factory\\n/// @author Trader Joe\\n/// @notice Factory that creates Mintpeg contracts\\ncontract MintpegFactory is Ownable {\\n    /// @notice Emitted on createMintpeg()\\n    /// @param mintpeg Address of deployed mintpeg\\n    /// @param name Mintpeg (ERC721) name\\n    /// @param symbol Mintpeg (ERC721) symbol\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param royaltyFee Royalty fee numerator\\n    event MintpegCreated(\\n        address indexed mintpeg,\\n        string name,\\n        string symbol,\\n        address indexed projectOwner,\\n        address indexed royaltyReceiver,\\n        uint96 royaltyFee\\n    );\\n\\n    /// @notice Mintpeg contract to be cloned\\n    address public mintpegImplementation;\\n\\n    /// @notice Array of all deployed mintpeg addresses\\n    address[] public allMintpegs;\\n\\n    /// @notice Mapping of adresses (deployer) to created mintpegs\\n    mapping(address => address[]) public createdMintpegs;\\n\\n    /// @notice Emmited on setMintpegImplementation()\\n    /// @param mintpegImplementation implementation of mintpeg\\n    event SetMintpegImplementation(address indexed mintpegImplementation);\\n\\n    /// @notice Function for creating mintpegs\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    function createMintpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _royaltyReceiver,\\n        uint96 _feePercent\\n    ) public {\\n        if (mintpegImplementation == address(0)) {\\n            revert MintpegFactory__InvalidMintpegImplementation();\\n        }\\n        address mintpeg = Clones.clone(mintpegImplementation);\\n        IMintpeg(mintpeg).initialize(\\n            _name,\\n            _symbol,\\n            _royaltyReceiver,\\n            _feePercent\\n        );\\n        IMintpeg(mintpeg).transferOwnership(msg.sender);\\n\\n        allMintpegs.push(mintpeg);\\n        createdMintpegs[msg.sender].push(mintpeg);\\n\\n        emit MintpegCreated(\\n            address(mintpeg),\\n            _name,\\n            _symbol,\\n            msg.sender,\\n            _royaltyReceiver,\\n            _feePercent\\n        );\\n    }\\n\\n    /// @notice Set address for mintpegImplementation\\n    /// @param _mintpegImplementation New mintpegImplementation\\n    function setMintpegImplementation(address _mintpegImplementation)\\n        external\\n        onlyOwner\\n    {\\n        if (_mintpegImplementation == address(0)) {\\n            revert MintpegFactory__InvalidMintpegImplementation();\\n        }\\n\\n        mintpegImplementation = _mintpegImplementation;\\n        emit SetMintpegImplementation(_mintpegImplementation);\\n    }\\n\\n    /// @notice Function to get number of mintpegs deployed by an address\\n    /// @param _deployer Address of mintpeg(s) deployer\\n    function getNumberOfMintpegsCreated(address _deployer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return createdMintpegs[_deployer].length;\\n    }\\n\\n    /// @notice Function to get number of mintpegs deployed\\n    /// @return uint256 number of all mintpegs deployed\\n    function getTotalMintpegsCount() external view returns (uint256) {\\n        return allMintpegs.length;\\n    }\\n\\n    /// @notice Function to get address of deployed mintpeg at given index\\n    /// @dev Should be used with getNumberOfMintpegsCreated() to prevent running into\\n    /// out-of-range index errors\\n    /// @param _deployer Address of mintpeg(s) deployer\\n    /// @param _createdMintpegIndex Index of Mintpeg to be returned\\n    /// @return address Address of the Mintpeg implementation at given index\\n    function getMintpegCreatedAtIndex(\\n        address _deployer,\\n        uint256 _createdMintpegIndex\\n    ) external view returns (address) {\\n        return createdMintpegs[_deployer][_createdMintpegIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x07df8ca221b6923389dd93de603a22063bfcb3724d6c0f3297b6ff46057f4e6b\",\"license\":\"MIT\"},\"contracts/interfaces/IMintpeg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/// @title IMintpeg\\n/// @author Trader Joe\\n/// @notice Defines the interface of Mintpeg\\ninterface IMintpeg {\\n    function initialize(\\n        string memory _collectionName,\\n        string memory _collectionSymbol,\\n        address _royaltyReceiver,\\n        uint96 _feePercent\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x618a787f497eabd866461c0048388705f763988dd9210f82a4f179a5b3458908\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111698061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610152578063a3ac269814610170578063c4cb86871461018e578063e1769ca9146101be578063f2fde38b146101da578063fcebe2f6146101f6576100a9565b806305032ef6146100ae57806364f204a8146100de578063715018a6146100fa57806378c017b3146101045780638b5c1c7b14610134575b600080fd5b6100c860048036038101906100c39190610b5b565b610226565b6040516100d59190610e76565b60405180910390f35b6100f860048036038101906100f39190610bc8565b610272565b005b610102610590565b005b61011e60048036038101906101199190610b88565b6105a4565b60405161012b9190610d63565b60405180910390f35b61013c61062a565b6040516101499190610e76565b60405180910390f35b61015a610637565b6040516101679190610d63565b60405180910390f35b610178610660565b6040516101859190610d63565b60405180910390f35b6101a860048036038101906101a39190610b88565b610686565b6040516101b59190610d63565b60405180910390f35b6101d860048036038101906101d39190610b5b565b6106d4565b005b6101f460048036038101906101ef9190610b5b565b6107ca565b005b610210600480360381019061020b9190610c67565b61084e565b60405161021d9190610d63565b60405180910390f35b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102fb576040517ff9c55d4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610328600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661088d565b90508073ffffffffffffffffffffffffffffffffffffffff1663b7e31add868686866040518563ffffffff1660e01b81526004016103699493929190610d7e565b600060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016103d49190610d63565b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8b789ba6704470f44c1d65439f507002a0000359cf01f1b2c9391c059a02e77188888760405161058193929190610dd1565b60405180910390a45050505050565b610598610962565b6105a260006109e0565b565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106105f7576105f6610fca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600280549050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360205281600052604060002081815481106106a257600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106dc610962565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610743576040517ff9c55d4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb57500a193a7ac5e2c8f69a3a5409bb3cc80d7823d7206f4081639b966ea1b2c60405160405180910390a250565b6107d2610962565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990610e16565b60405180910390fd5b61084b816109e0565b50565b6002818154811061085e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490610e36565b60405180910390fd5b919050565b61096a610aa4565b73ffffffffffffffffffffffffffffffffffffffff16610988610637565b73ffffffffffffffffffffffffffffffffffffffff16146109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d590610e56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000610abf610aba84610eb6565b610e91565b905082815260208101848484011115610adb57610ada61102d565b5b610ae6848285610f57565b509392505050565b600081359050610afd816110ee565b92915050565b600082601f830112610b1857610b17611028565b5b8135610b28848260208601610aac565b91505092915050565b600081359050610b4081611105565b92915050565b600081359050610b558161111c565b92915050565b600060208284031215610b7157610b70611037565b5b6000610b7f84828501610aee565b91505092915050565b60008060408385031215610b9f57610b9e611037565b5b6000610bad85828601610aee565b9250506020610bbe85828601610b31565b9150509250929050565b60008060008060808587031215610be257610be1611037565b5b600085013567ffffffffffffffff811115610c0057610bff611032565b5b610c0c87828801610b03565b945050602085013567ffffffffffffffff811115610c2d57610c2c611032565b5b610c3987828801610b03565b9350506040610c4a87828801610aee565b9250506060610c5b87828801610b46565b91505092959194509250565b600060208284031215610c7d57610c7c611037565b5b6000610c8b84828501610b31565b91505092915050565b610c9d81610f03565b82525050565b6000610cae82610ee7565b610cb88185610ef2565b9350610cc8818560208601610f66565b610cd18161103c565b840191505092915050565b6000610ce9602683610ef2565b9150610cf48261104d565b604082019050919050565b6000610d0c601683610ef2565b9150610d178261109c565b602082019050919050565b6000610d2f602083610ef2565b9150610d3a826110c5565b602082019050919050565b610d4e81610f35565b82525050565b610d5d81610f3f565b82525050565b6000602082019050610d786000830184610c94565b92915050565b60006080820190508181036000830152610d988187610ca3565b90508181036020830152610dac8186610ca3565b9050610dbb6040830185610c94565b610dc86060830184610d54565b95945050505050565b60006060820190508181036000830152610deb8186610ca3565b90508181036020830152610dff8185610ca3565b9050610e0e6040830184610d54565b949350505050565b60006020820190508181036000830152610e2f81610cdc565b9050919050565b60006020820190508181036000830152610e4f81610cff565b9050919050565b60006020820190508181036000830152610e6f81610d22565b9050919050565b6000602082019050610e8b6000830184610d45565b92915050565b6000610e9b610eac565b9050610ea78282610f99565b919050565b6000604051905090565b600067ffffffffffffffff821115610ed157610ed0610ff9565b5b610eda8261103c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f0e82610f15565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610f84578082015181840152602081019050610f69565b83811115610f93576000848401525b50505050565b610fa28261103c565b810181811067ffffffffffffffff82111715610fc157610fc0610ff9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6110f781610f03565b811461110257600080fd5b50565b61110e81610f35565b811461111957600080fd5b50565b61112581610f3f565b811461113057600080fd5b5056fea264697066735822122094f7c325a6578228d54e81dfc5b3dd0507ddf450def2b14e59b9a6a4271ff7c264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610152578063a3ac269814610170578063c4cb86871461018e578063e1769ca9146101be578063f2fde38b146101da578063fcebe2f6146101f6576100a9565b806305032ef6146100ae57806364f204a8146100de578063715018a6146100fa57806378c017b3146101045780638b5c1c7b14610134575b600080fd5b6100c860048036038101906100c39190610b5b565b610226565b6040516100d59190610e76565b60405180910390f35b6100f860048036038101906100f39190610bc8565b610272565b005b610102610590565b005b61011e60048036038101906101199190610b88565b6105a4565b60405161012b9190610d63565b60405180910390f35b61013c61062a565b6040516101499190610e76565b60405180910390f35b61015a610637565b6040516101679190610d63565b60405180910390f35b610178610660565b6040516101859190610d63565b60405180910390f35b6101a860048036038101906101a39190610b88565b610686565b6040516101b59190610d63565b60405180910390f35b6101d860048036038101906101d39190610b5b565b6106d4565b005b6101f460048036038101906101ef9190610b5b565b6107ca565b005b610210600480360381019061020b9190610c67565b61084e565b60405161021d9190610d63565b60405180910390f35b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102fb576040517ff9c55d4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610328600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661088d565b90508073ffffffffffffffffffffffffffffffffffffffff1663b7e31add868686866040518563ffffffff1660e01b81526004016103699493929190610d7e565b600060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016103d49190610d63565b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8b789ba6704470f44c1d65439f507002a0000359cf01f1b2c9391c059a02e77188888760405161058193929190610dd1565b60405180910390a45050505050565b610598610962565b6105a260006109e0565b565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106105f7576105f6610fca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600280549050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360205281600052604060002081815481106106a257600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106dc610962565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610743576040517ff9c55d4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb57500a193a7ac5e2c8f69a3a5409bb3cc80d7823d7206f4081639b966ea1b2c60405160405180910390a250565b6107d2610962565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990610e16565b60405180910390fd5b61084b816109e0565b50565b6002818154811061085e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490610e36565b60405180910390fd5b919050565b61096a610aa4565b73ffffffffffffffffffffffffffffffffffffffff16610988610637565b73ffffffffffffffffffffffffffffffffffffffff16146109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d590610e56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000610abf610aba84610eb6565b610e91565b905082815260208101848484011115610adb57610ada61102d565b5b610ae6848285610f57565b509392505050565b600081359050610afd816110ee565b92915050565b600082601f830112610b1857610b17611028565b5b8135610b28848260208601610aac565b91505092915050565b600081359050610b4081611105565b92915050565b600081359050610b558161111c565b92915050565b600060208284031215610b7157610b70611037565b5b6000610b7f84828501610aee565b91505092915050565b60008060408385031215610b9f57610b9e611037565b5b6000610bad85828601610aee565b9250506020610bbe85828601610b31565b9150509250929050565b60008060008060808587031215610be257610be1611037565b5b600085013567ffffffffffffffff811115610c0057610bff611032565b5b610c0c87828801610b03565b945050602085013567ffffffffffffffff811115610c2d57610c2c611032565b5b610c3987828801610b03565b9350506040610c4a87828801610aee565b9250506060610c5b87828801610b46565b91505092959194509250565b600060208284031215610c7d57610c7c611037565b5b6000610c8b84828501610b31565b91505092915050565b610c9d81610f03565b82525050565b6000610cae82610ee7565b610cb88185610ef2565b9350610cc8818560208601610f66565b610cd18161103c565b840191505092915050565b6000610ce9602683610ef2565b9150610cf48261104d565b604082019050919050565b6000610d0c601683610ef2565b9150610d178261109c565b602082019050919050565b6000610d2f602083610ef2565b9150610d3a826110c5565b602082019050919050565b610d4e81610f35565b82525050565b610d5d81610f3f565b82525050565b6000602082019050610d786000830184610c94565b92915050565b60006080820190508181036000830152610d988187610ca3565b90508181036020830152610dac8186610ca3565b9050610dbb6040830185610c94565b610dc86060830184610d54565b95945050505050565b60006060820190508181036000830152610deb8186610ca3565b90508181036020830152610dff8185610ca3565b9050610e0e6040830184610d54565b949350505050565b60006020820190508181036000830152610e2f81610cdc565b9050919050565b60006020820190508181036000830152610e4f81610cff565b9050919050565b60006020820190508181036000830152610e6f81610d22565b9050919050565b6000602082019050610e8b6000830184610d45565b92915050565b6000610e9b610eac565b9050610ea78282610f99565b919050565b6000604051905090565b600067ffffffffffffffff821115610ed157610ed0610ff9565b5b610eda8261103c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f0e82610f15565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610f84578082015181840152602081019050610f69565b83811115610f93576000848401525b50505050565b610fa28261103c565b810181811067ffffffffffffffff82111715610fc157610fc0610ff9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6110f781610f03565b811461110257600080fd5b50565b61110e81610f35565b811461111957600080fd5b50565b61112581610f3f565b811461113057600080fd5b5056fea264697066735822122094f7c325a6578228d54e81dfc5b3dd0507ddf450def2b14e59b9a6a4271ff7c264736f6c63430008070033",
  "devdoc": {
    "author": "Trader Joe",
    "events": {
      "MintpegCreated(address,string,string,address,address,uint96)": {
        "params": {
          "mintpeg": "Address of deployed mintpeg",
          "name": "Mintpeg (ERC721) name",
          "projectOwner": "The project owner",
          "royaltyFee": "Royalty fee numerator",
          "royaltyReceiver": "Royalty fee collector",
          "symbol": "Mintpeg (ERC721) symbol"
        }
      },
      "SetMintpegImplementation(address)": {
        "params": {
          "mintpegImplementation": "implementation of mintpeg"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createMintpeg(string,string,address,uint96)": {
        "params": {
          "_feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "_name": "ERC721 name",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        }
      },
      "getMintpegCreatedAtIndex(address,uint256)": {
        "details": "Should be used with getNumberOfMintpegsCreated() to prevent running into out-of-range index errors",
        "params": {
          "_createdMintpegIndex": "Index of Mintpeg to be returned",
          "_deployer": "Address of mintpeg(s) deployer"
        },
        "returns": {
          "_0": "address Address of the Mintpeg implementation at given index"
        }
      },
      "getNumberOfMintpegsCreated(address)": {
        "params": {
          "_deployer": "Address of mintpeg(s) deployer"
        }
      },
      "getTotalMintpegsCount()": {
        "returns": {
          "_0": "uint256 number of all mintpegs deployed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMintpegImplementation(address)": {
        "params": {
          "_mintpegImplementation": "New mintpegImplementation"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Mintpeg Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MintpegCreated(address,string,string,address,address,uint96)": {
        "notice": "Emitted on createMintpeg()"
      },
      "SetMintpegImplementation(address)": {
        "notice": "Emmited on setMintpegImplementation()"
      }
    },
    "kind": "user",
    "methods": {
      "allMintpegs(uint256)": {
        "notice": "Array of all deployed mintpeg addresses"
      },
      "createMintpeg(string,string,address,uint96)": {
        "notice": "Function for creating mintpegs"
      },
      "createdMintpegs(address,uint256)": {
        "notice": "Mapping of adresses (deployer) to created mintpegs"
      },
      "getMintpegCreatedAtIndex(address,uint256)": {
        "notice": "Function to get address of deployed mintpeg at given index"
      },
      "getNumberOfMintpegsCreated(address)": {
        "notice": "Function to get number of mintpegs deployed by an address"
      },
      "getTotalMintpegsCount()": {
        "notice": "Function to get number of mintpegs deployed"
      },
      "mintpegImplementation()": {
        "notice": "Mintpeg contract to be cloned"
      },
      "setMintpegImplementation(address)": {
        "notice": "Set address for mintpegImplementation"
      }
    },
    "notice": "Factory that creates Mintpeg contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2292,
        "contract": "contracts/MintpegFactory.sol:MintpegFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2869,
        "contract": "contracts/MintpegFactory.sol:MintpegFactory",
        "label": "mintpegImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2873,
        "contract": "contracts/MintpegFactory.sol:MintpegFactory",
        "label": "allMintpegs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2879,
        "contract": "contracts/MintpegFactory.sol:MintpegFactory",
        "label": "createdMintpegs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}