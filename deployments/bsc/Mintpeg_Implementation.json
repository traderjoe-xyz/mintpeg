{
  "address": "0xE56E6fDB37Da4C6d8Ea9f00E777ba6a565252307",
  "abi": [
    {
      "inputs": [],
      "name": "Mintpeg__InvalidRoyaltyInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mintpeg__InvalidTokenOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_collectionName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_collectionSymbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "InitializedMintpeg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feePercent",
          "type": "uint96"
        }
      ],
      "name": "RoyaltyInfoChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feePercent",
          "type": "uint96"
        }
      ],
      "name": "TokenRoyaltyInfoChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_collectionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_collectionSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ea330c9d21d045c9fe130fa11f9e8fc1fb25349589aec68f8a460c237042842",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0xE56E6fDB37Da4C6d8Ea9f00E777ba6a565252307",
    "transactionIndex": 13,
    "gasUsed": "3643327",
    "logsBloom": "0x
    "blockHash": "0x876689bf42e262e81cad75cf53f0e5fb1d596ee318f530c84170586012f721c7",
    "transactionHash": "0x4ea330c9d21d045c9fe130fa11f9e8fc1fb25349589aec68f8a460c237042842",
    "logs": [],
    "blockNumber": 24848870,
    "cumulativeGasUsed": "5407328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ef253e0f4ddd865f670a6d1e90bc1e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Mintpeg__InvalidRoyaltyInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mintpeg__InvalidTokenOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_collectionName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_collectionSymbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"InitializedMintpeg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feePercent\",\"type\":\"uint96\"}],\"name\":\"RoyaltyInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feePercent\",\"type\":\"uint96\"}],\"name\":\"TokenRoyaltyInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"events\":{\"InitializedMintpeg(string,string,address,address,uint96)\":{\"params\":{\"_collectionName\":\"ERC721 name\",\"_collectionSymbol\":\"ERC721 symbol\",\"_feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"_projectOwner\":\"function caller\",\"_royaltyReceiver\":\"Royalty fee collector\"}},\"RoyaltyInfoChanged(address,uint96)\":{\"params\":{\"feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"royaltyReceiver\":\"Royalty fee collector\"}},\"TokenRoyaltyInfoChanged(uint256,address,uint96)\":{\"params\":{\"feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"royaltyReceiver\":\"Royalty fee collector\",\"tokenId\":\"Token ID royalty to be set\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Can only be called by token owner\",\"params\":{\"_tokenId\":\"Token ID to be burnt\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address,address,uint96)\":{\"params\":{\"_collectionName\":\"ERC721 name\",\"_collectionSymbol\":\"ERC721 symbol\",\"_feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"_royaltyReceiver\":\"Royalty fee collector\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(string[])\":{\"details\":\"Can only be called by project owner\",\"params\":{\"_tokenURIs\":\"Array of tokenURIs (probably IPFS) of the tokenIds to be minted\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setRoyaltyInfo(address,uint96)\":{\"details\":\"Can only be called by project ownerowner can prevent any sale by setting the address to any address that can't receive AVAX.\",\"params\":{\"_feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"_royaltyReceiver\":\"Royalty fee collector\"}},\"setTokenRoyaltyInfo(uint256,address,uint96)\":{\"details\":\"Can only be called by project ownerowner can prevent any sale by setting the address to any address that can't receive AVAX.\",\"params\":{\"_feePercent\":\"Royalty fee numerator; denominator is 10,000. So 500 represents 5%\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_tokenId\":\"Token ID royalty to be set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Needs to be overridden cause two base contracts implement it\",\"params\":{\"_interfaceId\":\"InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\"},\"returns\":{\"_0\":\"bool True if the considered interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Mintpeg Contract\",\"version\":1},\"userdoc\":{\"events\":{\"InitializedMintpeg(string,string,address,address,uint96)\":{\"notice\":\"Emmited on initialize()\"},\"RoyaltyInfoChanged(address,uint96)\":{\"notice\":\"Emmited on setRoyaltyInfo()\"},\"TokenRoyaltyInfoChanged(uint256,address,uint96)\":{\"notice\":\"Emmited on setTokenRoyaltyInfo()\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Function to burn a token\"},\"initialize(string,string,address,address,uint96)\":{\"notice\":\"Mintpeg initialization\"},\"mint(string[])\":{\"notice\":\"Function to mint new tokens\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Function for changing royalty information\"},\"setTokenRoyaltyInfo(uint256,address,uint96)\":{\"notice\":\"Function for changing token royalty information\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns true if this contract implements the interface defined by `interfaceId`\"}},\"notice\":\"ERC721 contracts for artists to mint NFTs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mintpeg.sol\":\"Mintpeg\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Mintpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./MintpegErrors.sol\\\";\\n\\n/// @title Mintpeg Contract\\n/// @author Trader Joe\\n/// @notice ERC721 contracts for artists to mint NFTs\\ncontract Mintpeg is\\n    ERC721URIStorageUpgradeable,\\n    ERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n\\n    /// @notice Emmited on setRoyaltyInfo()\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    event RoyaltyInfoChanged(\\n        address indexed royaltyReceiver,\\n        uint96 feePercent\\n    );\\n\\n    /// @notice Emmited on setTokenRoyaltyInfo()\\n    /// @param tokenId Token ID royalty to be set\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    event TokenRoyaltyInfoChanged(\\n        uint256 tokenId,\\n        address indexed royaltyReceiver,\\n        uint96 feePercent\\n    );\\n\\n    /// @notice Emmited on initialize()\\n    /// @param _collectionName ERC721 name\\n    /// @param _collectionSymbol ERC721 symbol\\n    /// @param _projectOwner function caller\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    event InitializedMintpeg(\\n        string indexed _collectionName,\\n        string indexed _collectionSymbol,\\n        address indexed _projectOwner,\\n        address _royaltyReceiver,\\n        uint96 _feePercent\\n    );\\n\\n    /// @notice Mintpeg initialization\\n    /// @param _collectionName ERC721 name\\n    /// @param _collectionSymbol ERC721 symbol\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    function initialize(\\n        string memory _collectionName,\\n        string memory _collectionSymbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint96 _feePercent\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC2981_init();\\n        __ERC721_init(_collectionName, _collectionSymbol);\\n        setRoyaltyInfo(_royaltyReceiver, _feePercent);\\n        transferOwnership(_projectOwner);\\n\\n        emit InitializedMintpeg(\\n            _collectionName,\\n            _collectionSymbol,\\n            msg.sender,\\n            _royaltyReceiver,\\n            _feePercent\\n        );\\n    }\\n\\n    /// @notice Function to mint new tokens\\n    /// @dev Can only be called by project owner\\n    /// @param _tokenURIs Array of tokenURIs (probably IPFS) of the tokenIds to be minted\\n    function mint(string[] memory _tokenURIs) external onlyOwner {\\n        uint256 newTokenId;\\n        for (uint256 i = 0; i < _tokenURIs.length; i++) {\\n            newTokenId = _tokenIds.current();\\n            _tokenIds.increment();\\n            _mint(msg.sender, newTokenId);\\n            _setTokenURI(newTokenId, _tokenURIs[i]);\\n        }\\n    }\\n\\n    /// @notice Function for changing royalty information\\n    /// @dev Can only be called by project owner\\n    /// @dev owner can prevent any sale by setting the address to any address that can't receive AVAX.\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    function setRoyaltyInfo(address _royaltyReceiver, uint96 _feePercent)\\n        public\\n        onlyOwner\\n    {\\n        // Royalty fees are limited to 25%\\n        if (_feePercent > 2_500) {\\n            revert Mintpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(_royaltyReceiver, _feePercent);\\n        emit RoyaltyInfoChanged(_royaltyReceiver, _feePercent);\\n    }\\n\\n    /// @notice Function for changing token royalty information\\n    /// @dev Can only be called by project owner\\n    /// @dev owner can prevent any sale by setting the address to any address that can't receive AVAX.\\n    /// @param _tokenId Token ID royalty to be set\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _feePercent Royalty fee numerator; denominator is 10,000. So 500 represents 5%\\n    function setTokenRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _royaltyReceiver,\\n        uint96 _feePercent\\n    ) public onlyOwner {\\n        // Royalty fees are limited to 25%\\n        if (_feePercent > 2_500) {\\n            revert Mintpeg__InvalidRoyaltyInfo();\\n        }\\n        _setTokenRoyalty(_tokenId, _royaltyReceiver, _feePercent);\\n        emit TokenRoyaltyInfoChanged(_tokenId, _royaltyReceiver, _feePercent);\\n    }\\n\\n    /// @notice Function to burn a token\\n    /// @dev Can only be called by token owner\\n    /// @param _tokenId Token ID to be burnt\\n    function burn(uint256 _tokenId) external {\\n        if (ownerOf(_tokenId) != msg.sender) {\\n            revert Mintpeg__InvalidTokenOwner();\\n        }\\n        super._burn(_tokenId);\\n        _resetTokenRoyalty(_tokenId);\\n    }\\n\\n    /// @notice Returns true if this contract implements the interface defined by `interfaceId`\\n    /// @dev Needs to be overridden cause two base contracts implement it\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\\n    /// @return bool True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, ERC2981Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(_interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(_interfaceId) ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf356aff7469b5d6c47847e0e3bcd35b22f8491c600084a0d7d71db3cbe62a616\",\"license\":\"MIT\"},\"contracts/MintpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nerror Mintpeg__InvalidRoyaltyInfo();\\nerror Mintpeg__InvalidProjectOwner();\\nerror Mintpeg__InvalidTokenOwner();\\nerror MintpegFactory__InvalidMintpegImplementation();\\n\",\"keccak256\":\"0xcf703964253f7f75b1c92aed9f48e15463440c0a4df999504a6f1a3f48e3d05d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614142806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063afef7c041161007c578063afef7c0414610360578063b88d4fde1461037c578063b8f7300314610398578063c87b56dd146103b4578063e985e9c5146103e4578063f2fde38b1461041457610142565b806370a08231146102ce578063715018a6146102fe5780638da5cb5b1461030857806395d89b4114610326578063a22cb4651461034457610142565b806323b872dd1161010a57806323b872dd146101fd5780632a55205a1461021957806342842e0e1461024a57806342966c68146102665780635768f271146102825780636352211e1461029e57610142565b806301ffc9a71461014757806302fa7c471461017757806306fdde0314610193578063081812fc146101b1578063095ea7b3146101e1575b600080fd5b610161600480360381019061015c9190612d7d565b610430565b60405161016e91906133c5565b60405180910390f35b610191600480360381019061018c9190612cf4565b610462565b005b61019b610510565b6040516101a891906133fb565b60405180910390f35b6101cb60048036038101906101c69190612e8a565b6105a2565b6040516101d8919061330c565b60405180910390f35b6101fb60048036038101906101f69190612cb4565b6105e8565b005b61021760048036038101906102129190612b9e565b610700565b005b610233600480360381019061022e9190612f0a565b610760565b604051610241929190613373565b60405180910390f35b610264600480360381019061025f9190612b9e565b61094b565b005b610280600480360381019061027b9190612e8a565b61096b565b005b61029c60048036038101906102979190612d34565b6109ed565b005b6102b860048036038101906102b39190612e8a565b610a64565b6040516102c5919061330c565b60405180910390f35b6102e860048036038101906102e39190612b31565b610b16565b6040516102f5919061367d565b60405180910390f35b610306610bce565b005b610310610be2565b60405161031d919061330c565b60405180910390f35b61032e610c0c565b60405161033b91906133fb565b60405180910390f35b61035e60048036038101906103599190612c74565b610c9e565b005b61037a60048036038101906103759190612dd7565b610cb4565b005b61039660048036038101906103919190612bf1565b610e98565b005b6103b260048036038101906103ad9190612eb7565b610efa565b005b6103ce60048036038101906103c99190612e8a565b610fac565b6040516103db91906133fb565b60405180910390f35b6103fe60048036038101906103f99190612b5e565b6110bf565b60405161040b91906133c5565b60405180910390f35b61042e60048036038101906104299190612b31565b611153565b005b600061043b826111d7565b8061044b575061044a826112b9565b5b8061045b575061045a826112b9565b5b9050919050565b61046a611333565b6109c4816bffffffffffffffffffffffff1611156104b4576040517f67e4629a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104be82826113b1565b8173ffffffffffffffffffffffffffffffffffffffff167f649787d44a877bdd8d255fbfdaba9927f56be0ec7aae8fb86cd16841966479d28260405161050491906136c1565b60405180910390a25050565b60606065805461051f906139d4565b80601f016020809104026020016040519081016040528092919081815260200182805461054b906139d4565b80156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b5050505050905090565b60006105ad82611547565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f382610a64565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b906135bd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610683611592565b73ffffffffffffffffffffffffffffffffffffffff1614806106b257506106b1816106ac611592565b6110bf565b5b6106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e89061353d565b60405180910390fd5b6106fb838361159a565b505050565b61071161070b611592565b82611653565b610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061363d565b60405180910390fd5b61075b8383836116e8565b505050565b600080600060ca60008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156108f65760c96040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b600061090061194f565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff168661092c9190613859565b6109369190613828565b90508160000151819350935050509250929050565b61096683838360405180602001604052806000815250610e98565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1661098b82610a64565b73ffffffffffffffffffffffffffffffffffffffff16146109d8576040517feeaa790500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e181611959565b6109ea816119ac565b50565b6109f5611333565b600080600090505b8251811015610a5f57610a1161012d611a0b565b9150610a1e61012d611a19565b610a283383611a2f565b610a4c82848381518110610a3f57610a3e613b3e565b5b6020026020010151611c09565b8080610a5790613a37565b9150506109fd565b505050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b049061359d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e906134dd565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bd6611333565b610be06000611c7d565b565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060668054610c1b906139d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c47906139d4565b8015610c945780601f10610c6957610100808354040283529160200191610c94565b820191906000526020600020905b815481529060010190602001808311610c7757829003601f168201915b5050505050905090565b610cb0610ca9611592565b8383611d43565b5050565b60008060019054906101000a900460ff16159050808015610ce55750600160008054906101000a900460ff1660ff16105b80610d125750610cf430611eb0565b158015610d115750600160008054906101000a900460ff1660ff16145b5b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d489061351d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610d8e576001600060016101000a81548160ff0219169083151502179055505b610d96611ed3565b610d9e611f2c565b610da88686611f7d565b610db28383610462565b610dbb84611153565b3373ffffffffffffffffffffffffffffffffffffffff1685604051610de091906132d1565b604051809103902087604051610df691906132d1565b60405180910390207fb1b873058c2281a857e99160de508f1e36f6fbbeca6de3a45bf8316ff91ead788686604051610e2f92919061339c565b60405180910390a48015610e905760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610e8791906133e0565b60405180910390a15b505050505050565b610ea9610ea3611592565b83611653565b610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf9061363d565b60405180910390fd5b610ef484848484611fda565b50505050565b610f02611333565b6109c4816bffffffffffffffffffffffff161115610f4c576040517f67e4629a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f57838383612036565b8173ffffffffffffffffffffffffffffffffffffffff167f6b487ddd0efdbfd7606e8030e43550f55602ad00f641f939c333b8731daca8a28483604051610f9f929190613698565b60405180910390a2505050565b6060610fb782611547565b6000609760008481526020019081526020016000208054610fd7906139d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611003906139d4565b80156110505780601f1061102557610100808354040283529160200191611050565b820191906000526020600020905b81548152906001019060200180831161103357829003601f168201915b5050505050905060006110616121de565b90506000815114156110775781925050506110ba565b6000825111156110ac5780826040516020016110949291906132e8565b604051602081830303815290604052925050506110ba565b6110b5846121f5565b925050505b919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61115b611333565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c29061343d565b60405180910390fd5b6111d481611c7d565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112a257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806112b257506112b18261225d565b5b9050919050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061132c575061132b826111d7565b5b9050919050565b61133b611592565b73ffffffffffffffffffffffffffffffffffffffff16611359610be2565b73ffffffffffffffffffffffffffffffffffffffff16146113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a69061357d565b60405180910390fd5b565b6113b961194f565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e9061361d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147e9061365d565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060c960008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b611550816122c7565b61158f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115869061359d565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661160d83610a64565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061165f83610a64565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116a157506116a081856110bf565b5b806116df57508373ffffffffffffffffffffffffffffffffffffffff166116c7846105a2565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661170882610a64565b73ffffffffffffffffffffffffffffffffffffffff161461175e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117559061345d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c59061349d565b60405180910390fd5b6117d9838383612333565b6117e460008261159a565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461183491906138b3565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188b91906137d2565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461194a838383612338565b505050565b6000612710905090565b6119628161233d565b6000609760008381526020019081526020016000208054611982906139d4565b9050146119a9576097600082815260200190815260200160002060006119a89190612834565b5b50565b60ca6000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a969061355d565b60405180910390fd5b611aa8816122c7565b15611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf9061347d565b60405180910390fd5b611af460008383612333565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4491906137d2565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c0560008383612338565b5050565b611c12826122c7565b611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c48906134fd565b60405180910390fd5b80609760008481526020019081526020016000209080519060200190611c78929190612874565b505050565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160fb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da9906134bd565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ea391906133c5565b60405180910390a3505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f19906135fd565b60405180910390fd5b611f2a61245a565b565b600060019054906101000a900460ff16611f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f72906135fd565b60405180910390fd5b565b600060019054906101000a900460ff16611fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc3906135fd565b60405180910390fd5b611fd682826124bb565b5050565b611fe58484846116e8565b611ff18484848461253c565b612030576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120279061341d565b60405180910390fd5b50505050565b61203e61194f565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff16111561209c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120939061361d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612103906135dd565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060ca600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b606060405180602001604052806000815250905090565b606061220082611547565b600061220a6121de565b9050600081511161222a5760405180602001604052806000815250612255565b80612234846126d3565b6040516020016122459291906132e8565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061234882610a64565b905061235681600084612333565b61236160008361159a565b6001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123b191906138b3565b925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461245681600084612338565b5050565b600060019054906101000a900460ff166124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a0906135fd565b60405180910390fd5b6124b96124b4611592565b611c7d565b565b600060019054906101000a900460ff1661250a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612501906135fd565b60405180910390fd5b8160659080519060200190612520929190612874565b508060669080519060200190612537929190612874565b505050565b600061255d8473ffffffffffffffffffffffffffffffffffffffff16611eb0565b156126c6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612586611592565b8786866040518563ffffffff1660e01b81526004016125a89493929190613327565b602060405180830381600087803b1580156125c257600080fd5b505af19250505080156125f357506040513d601f19601f820116820180604052508101906125f09190612daa565b60015b612676573d8060008114612623576040519150601f19603f3d011682016040523d82523d6000602084013e612628565b606091505b5060008151141561266e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126659061341d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126cb565b600190505b949350505050565b6060600082141561271b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061282f565b600082905060005b6000821461274d57808061273690613a37565b915050600a826127469190613828565b9150612723565b60008167ffffffffffffffff81111561276957612768613b6d565b5b6040519080825280601f01601f19166020018201604052801561279b5781602001600182028036833780820191505090505b5090505b60008514612828576001826127b491906138b3565b9150600a856127c39190613a80565b60306127cf91906137d2565b60f81b8183815181106127e5576127e4613b3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856128219190613828565b945061279f565b8093505050505b919050565b508054612840906139d4565b6000825580601f106128525750612871565b601f01602090049060005260206000209081019061287091906128fa565b5b50565b828054612880906139d4565b90600052602060002090601f0160209004810192826128a257600085556128e9565b82601f106128bb57805160ff19168380011785556128e9565b828001600101855582156128e9579182015b828111156128e85782518255916020019190600101906128cd565b5b5090506128f691906128fa565b5090565b5b808211156129135760008160009055506001016128fb565b5090565b600061292a61292584613701565b6136dc565b9050808382526020820190508285602086028201111561294d5761294c613ba1565b5b60005b8581101561299b57813567ffffffffffffffff81111561297357612972613b9c565b5b8086016129808982612ad9565b85526020850194506020840193505050600181019050612950565b5050509392505050565b60006129b86129b38461372d565b6136dc565b9050828152602081018484840111156129d4576129d3613ba6565b5b6129df848285613992565b509392505050565b60006129fa6129f58461375e565b6136dc565b905082815260208101848484011115612a1657612a15613ba6565b5b612a21848285613992565b509392505050565b600081359050612a3881614099565b92915050565b600082601f830112612a5357612a52613b9c565b5b8135612a63848260208601612917565b91505092915050565b600081359050612a7b816140b0565b92915050565b600081359050612a90816140c7565b92915050565b600081519050612aa5816140c7565b92915050565b600082601f830112612ac057612abf613b9c565b5b8135612ad08482602086016129a5565b91505092915050565b600082601f830112612aee57612aed613b9c565b5b8135612afe8482602086016129e7565b91505092915050565b600081359050612b16816140de565b92915050565b600081359050612b2b816140f5565b92915050565b600060208284031215612b4757612b46613bb0565b5b6000612b5584828501612a29565b91505092915050565b60008060408385031215612b7557612b74613bb0565b5b6000612b8385828601612a29565b9250506020612b9485828601612a29565b9150509250929050565b600080600060608486031215612bb757612bb6613bb0565b5b6000612bc586828701612a29565b9350506020612bd686828701612a29565b9250506040612be786828701612b07565b9150509250925092565b60008060008060808587031215612c0b57612c0a613bb0565b5b6000612c1987828801612a29565b9450506020612c2a87828801612a29565b9350506040612c3b87828801612b07565b925050606085013567ffffffffffffffff811115612c5c57612c5b613bab565b5b612c6887828801612aab565b91505092959194509250565b60008060408385031215612c8b57612c8a613bb0565b5b6000612c9985828601612a29565b9250506020612caa85828601612a6c565b9150509250929050565b60008060408385031215612ccb57612cca613bb0565b5b6000612cd985828601612a29565b9250506020612cea85828601612b07565b9150509250929050565b60008060408385031215612d0b57612d0a613bb0565b5b6000612d1985828601612a29565b9250506020612d2a85828601612b1c565b9150509250929050565b600060208284031215612d4a57612d49613bb0565b5b600082013567ffffffffffffffff811115612d6857612d67613bab565b5b612d7484828501612a3e565b91505092915050565b600060208284031215612d9357612d92613bb0565b5b6000612da184828501612a81565b91505092915050565b600060208284031215612dc057612dbf613bb0565b5b6000612dce84828501612a96565b91505092915050565b600080600080600060a08688031215612df357612df2613bb0565b5b600086013567ffffffffffffffff811115612e1157612e10613bab565b5b612e1d88828901612ad9565b955050602086013567ffffffffffffffff811115612e3e57612e3d613bab565b5b612e4a88828901612ad9565b9450506040612e5b88828901612a29565b9350506060612e6c88828901612a29565b9250506080612e7d88828901612b1c565b9150509295509295909350565b600060208284031215612ea057612e9f613bb0565b5b6000612eae84828501612b07565b91505092915050565b600080600060608486031215612ed057612ecf613bb0565b5b6000612ede86828701612b07565b9350506020612eef86828701612a29565b9250506040612f0086828701612b1c565b9150509250925092565b60008060408385031215612f2157612f20613bb0565b5b6000612f2f85828601612b07565b9250506020612f4085828601612b07565b9150509250929050565b612f53816138e7565b82525050565b612f62816138f9565b82525050565b6000612f738261378f565b612f7d81856137a5565b9350612f8d8185602086016139a1565b612f9681613bb5565b840191505092915050565b612faa81613980565b82525050565b6000612fbb8261379a565b612fc581856137b6565b9350612fd58185602086016139a1565b612fde81613bb5565b840191505092915050565b6000612ff48261379a565b612ffe81856137c7565b935061300e8185602086016139a1565b80840191505092915050565b60006130276032836137b6565b915061303282613bc6565b604082019050919050565b600061304a6026836137b6565b915061305582613c15565b604082019050919050565b600061306d6025836137b6565b915061307882613c64565b604082019050919050565b6000613090601c836137b6565b915061309b82613cb3565b602082019050919050565b60006130b36024836137b6565b91506130be82613cdc565b604082019050919050565b60006130d66019836137b6565b91506130e182613d2b565b602082019050919050565b60006130f96029836137b6565b915061310482613d54565b604082019050919050565b600061311c602e836137b6565b915061312782613da3565b604082019050919050565b600061313f602e836137b6565b915061314a82613df2565b604082019050919050565b6000613162603e836137b6565b915061316d82613e41565b604082019050919050565b60006131856020836137b6565b915061319082613e90565b602082019050919050565b60006131a86020836137b6565b91506131b382613eb9565b602082019050919050565b60006131cb6018836137b6565b91506131d682613ee2565b602082019050919050565b60006131ee6021836137b6565b91506131f982613f0b565b604082019050919050565b6000613211601b836137b6565b915061321c82613f5a565b602082019050919050565b6000613234602b836137b6565b915061323f82613f83565b604082019050919050565b6000613257602a836137b6565b915061326282613fd2565b604082019050919050565b600061327a602e836137b6565b915061328582614021565b604082019050919050565b600061329d6019836137b6565b91506132a882614070565b602082019050919050565b6132bc81613951565b82525050565b6132cb81613968565b82525050565b60006132dd8284612fe9565b915081905092915050565b60006132f48285612fe9565b91506133008284612fe9565b91508190509392505050565b60006020820190506133216000830184612f4a565b92915050565b600060808201905061333c6000830187612f4a565b6133496020830186612f4a565b61335660408301856132b3565b81810360608301526133688184612f68565b905095945050505050565b60006040820190506133886000830185612f4a565b61339560208301846132b3565b9392505050565b60006040820190506133b16000830185612f4a565b6133be60208301846132c2565b9392505050565b60006020820190506133da6000830184612f59565b92915050565b60006020820190506133f56000830184612fa1565b92915050565b600060208201905081810360008301526134158184612fb0565b905092915050565b600060208201905081810360008301526134368161301a565b9050919050565b600060208201905081810360008301526134568161303d565b9050919050565b6000602082019050818103600083015261347681613060565b9050919050565b6000602082019050818103600083015261349681613083565b9050919050565b600060208201905081810360008301526134b6816130a6565b9050919050565b600060208201905081810360008301526134d6816130c9565b9050919050565b600060208201905081810360008301526134f6816130ec565b9050919050565b600060208201905081810360008301526135168161310f565b9050919050565b6000602082019050818103600083015261353681613132565b9050919050565b6000602082019050818103600083015261355681613155565b9050919050565b6000602082019050818103600083015261357681613178565b9050919050565b600060208201905081810360008301526135968161319b565b9050919050565b600060208201905081810360008301526135b6816131be565b9050919050565b600060208201905081810360008301526135d6816131e1565b9050919050565b600060208201905081810360008301526135f681613204565b9050919050565b6000602082019050818103600083015261361681613227565b9050919050565b600060208201905081810360008301526136368161324a565b9050919050565b600060208201905081810360008301526136568161326d565b9050919050565b6000602082019050818103600083015261367681613290565b9050919050565b600060208201905061369260008301846132b3565b92915050565b60006040820190506136ad60008301856132b3565b6136ba60208301846132c2565b9392505050565b60006020820190506136d660008301846132c2565b92915050565b60006136e66136f7565b90506136f28282613a06565b919050565b6000604051905090565b600067ffffffffffffffff82111561371c5761371b613b6d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561374857613747613b6d565b5b61375182613bb5565b9050602081019050919050565b600067ffffffffffffffff82111561377957613778613b6d565b5b61378282613bb5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006137dd82613951565b91506137e883613951565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561381d5761381c613ab1565b5b828201905092915050565b600061383382613951565b915061383e83613951565b92508261384e5761384d613ae0565b5b828204905092915050565b600061386482613951565b915061386f83613951565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138a8576138a7613ab1565b5b828202905092915050565b60006138be82613951565b91506138c983613951565b9250828210156138dc576138db613ab1565b5b828203905092915050565b60006138f282613931565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b600061398b8261395b565b9050919050565b82818337600083830152505050565b60005b838110156139bf5780820151818401526020810190506139a4565b838111156139ce576000848401525b50505050565b600060028204905060018216806139ec57607f821691505b60208210811415613a00576139ff613b0f565b5b50919050565b613a0f82613bb5565b810181811067ffffffffffffffff82111715613a2e57613a2d613b6d565b5b80604052505050565b6000613a4282613951565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a7557613a74613ab1565b5b600182019050919050565b6000613a8b82613951565b9150613a9683613951565b925082613aa657613aa5613ae0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b6140a2816138e7565b81146140ad57600080fd5b50565b6140b9816138f9565b81146140c457600080fd5b50565b6140d081613905565b81146140db57600080fd5b50565b6140e781613951565b81146140f257600080fd5b50565b6140fe81613968565b811461410957600080fd5b5056fea2646970667358221220717a0cba21e327659eab025b459c58a8bde7b3e1b7218760413d4018b29d158e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063afef7c041161007c578063afef7c0414610360578063b88d4fde1461037c578063b8f7300314610398578063c87b56dd146103b4578063e985e9c5146103e4578063f2fde38b1461041457610142565b806370a08231146102ce578063715018a6146102fe5780638da5cb5b1461030857806395d89b4114610326578063a22cb4651461034457610142565b806323b872dd1161010a57806323b872dd146101fd5780632a55205a1461021957806342842e0e1461024a57806342966c68146102665780635768f271146102825780636352211e1461029e57610142565b806301ffc9a71461014757806302fa7c471461017757806306fdde0314610193578063081812fc146101b1578063095ea7b3146101e1575b600080fd5b610161600480360381019061015c9190612d7d565b610430565b60405161016e91906133c5565b60405180910390f35b610191600480360381019061018c9190612cf4565b610462565b005b61019b610510565b6040516101a891906133fb565b60405180910390f35b6101cb60048036038101906101c69190612e8a565b6105a2565b6040516101d8919061330c565b60405180910390f35b6101fb60048036038101906101f69190612cb4565b6105e8565b005b61021760048036038101906102129190612b9e565b610700565b005b610233600480360381019061022e9190612f0a565b610760565b604051610241929190613373565b60405180910390f35b610264600480360381019061025f9190612b9e565b61094b565b005b610280600480360381019061027b9190612e8a565b61096b565b005b61029c60048036038101906102979190612d34565b6109ed565b005b6102b860048036038101906102b39190612e8a565b610a64565b6040516102c5919061330c565b60405180910390f35b6102e860048036038101906102e39190612b31565b610b16565b6040516102f5919061367d565b60405180910390f35b610306610bce565b005b610310610be2565b60405161031d919061330c565b60405180910390f35b61032e610c0c565b60405161033b91906133fb565b60405180910390f35b61035e60048036038101906103599190612c74565b610c9e565b005b61037a60048036038101906103759190612dd7565b610cb4565b005b61039660048036038101906103919190612bf1565b610e98565b005b6103b260048036038101906103ad9190612eb7565b610efa565b005b6103ce60048036038101906103c99190612e8a565b610fac565b6040516103db91906133fb565b60405180910390f35b6103fe60048036038101906103f99190612b5e565b6110bf565b60405161040b91906133c5565b60405180910390f35b61042e60048036038101906104299190612b31565b611153565b005b600061043b826111d7565b8061044b575061044a826112b9565b5b8061045b575061045a826112b9565b5b9050919050565b61046a611333565b6109c4816bffffffffffffffffffffffff1611156104b4576040517f67e4629a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104be82826113b1565b8173ffffffffffffffffffffffffffffffffffffffff167f649787d44a877bdd8d255fbfdaba9927f56be0ec7aae8fb86cd16841966479d28260405161050491906136c1565b60405180910390a25050565b60606065805461051f906139d4565b80601f016020809104026020016040519081016040528092919081815260200182805461054b906139d4565b80156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b5050505050905090565b60006105ad82611547565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f382610a64565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b906135bd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610683611592565b73ffffffffffffffffffffffffffffffffffffffff1614806106b257506106b1816106ac611592565b6110bf565b5b6106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e89061353d565b60405180910390fd5b6106fb838361159a565b505050565b61071161070b611592565b82611653565b610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061363d565b60405180910390fd5b61075b8383836116e8565b505050565b600080600060ca60008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156108f65760c96040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b600061090061194f565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff168661092c9190613859565b6109369190613828565b90508160000151819350935050509250929050565b61096683838360405180602001604052806000815250610e98565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1661098b82610a64565b73ffffffffffffffffffffffffffffffffffffffff16146109d8576040517feeaa790500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e181611959565b6109ea816119ac565b50565b6109f5611333565b600080600090505b8251811015610a5f57610a1161012d611a0b565b9150610a1e61012d611a19565b610a283383611a2f565b610a4c82848381518110610a3f57610a3e613b3e565b5b6020026020010151611c09565b8080610a5790613a37565b9150506109fd565b505050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b049061359d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e906134dd565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bd6611333565b610be06000611c7d565b565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060668054610c1b906139d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c47906139d4565b8015610c945780601f10610c6957610100808354040283529160200191610c94565b820191906000526020600020905b815481529060010190602001808311610c7757829003601f168201915b5050505050905090565b610cb0610ca9611592565b8383611d43565b5050565b60008060019054906101000a900460ff16159050808015610ce55750600160008054906101000a900460ff1660ff16105b80610d125750610cf430611eb0565b158015610d115750600160008054906101000a900460ff1660ff16145b5b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d489061351d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610d8e576001600060016101000a81548160ff0219169083151502179055505b610d96611ed3565b610d9e611f2c565b610da88686611f7d565b610db28383610462565b610dbb84611153565b3373ffffffffffffffffffffffffffffffffffffffff1685604051610de091906132d1565b604051809103902087604051610df691906132d1565b60405180910390207fb1b873058c2281a857e99160de508f1e36f6fbbeca6de3a45bf8316ff91ead788686604051610e2f92919061339c565b60405180910390a48015610e905760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610e8791906133e0565b60405180910390a15b505050505050565b610ea9610ea3611592565b83611653565b610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf9061363d565b60405180910390fd5b610ef484848484611fda565b50505050565b610f02611333565b6109c4816bffffffffffffffffffffffff161115610f4c576040517f67e4629a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f57838383612036565b8173ffffffffffffffffffffffffffffffffffffffff167f6b487ddd0efdbfd7606e8030e43550f55602ad00f641f939c333b8731daca8a28483604051610f9f929190613698565b60405180910390a2505050565b6060610fb782611547565b6000609760008481526020019081526020016000208054610fd7906139d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611003906139d4565b80156110505780601f1061102557610100808354040283529160200191611050565b820191906000526020600020905b81548152906001019060200180831161103357829003601f168201915b5050505050905060006110616121de565b90506000815114156110775781925050506110ba565b6000825111156110ac5780826040516020016110949291906132e8565b604051602081830303815290604052925050506110ba565b6110b5846121f5565b925050505b919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61115b611333565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c29061343d565b60405180910390fd5b6111d481611c7d565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112a257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806112b257506112b18261225d565b5b9050919050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061132c575061132b826111d7565b5b9050919050565b61133b611592565b73ffffffffffffffffffffffffffffffffffffffff16611359610be2565b73ffffffffffffffffffffffffffffffffffffffff16146113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a69061357d565b60405180910390fd5b565b6113b961194f565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e9061361d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147e9061365d565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060c960008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b611550816122c7565b61158f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115869061359d565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661160d83610a64565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061165f83610a64565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116a157506116a081856110bf565b5b806116df57508373ffffffffffffffffffffffffffffffffffffffff166116c7846105a2565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661170882610a64565b73ffffffffffffffffffffffffffffffffffffffff161461175e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117559061345d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c59061349d565b60405180910390fd5b6117d9838383612333565b6117e460008261159a565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461183491906138b3565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188b91906137d2565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461194a838383612338565b505050565b6000612710905090565b6119628161233d565b6000609760008381526020019081526020016000208054611982906139d4565b9050146119a9576097600082815260200190815260200160002060006119a89190612834565b5b50565b60ca6000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a969061355d565b60405180910390fd5b611aa8816122c7565b15611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf9061347d565b60405180910390fd5b611af460008383612333565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4491906137d2565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c0560008383612338565b5050565b611c12826122c7565b611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c48906134fd565b60405180910390fd5b80609760008481526020019081526020016000209080519060200190611c78929190612874565b505050565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160fb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da9906134bd565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ea391906133c5565b60405180910390a3505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f19906135fd565b60405180910390fd5b611f2a61245a565b565b600060019054906101000a900460ff16611f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f72906135fd565b60405180910390fd5b565b600060019054906101000a900460ff16611fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc3906135fd565b60405180910390fd5b611fd682826124bb565b5050565b611fe58484846116e8565b611ff18484848461253c565b612030576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120279061341d565b60405180910390fd5b50505050565b61203e61194f565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff16111561209c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120939061361d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612103906135dd565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060ca600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b606060405180602001604052806000815250905090565b606061220082611547565b600061220a6121de565b9050600081511161222a5760405180602001604052806000815250612255565b80612234846126d3565b6040516020016122459291906132e8565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061234882610a64565b905061235681600084612333565b61236160008361159a565b6001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123b191906138b3565b925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461245681600084612338565b5050565b600060019054906101000a900460ff166124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a0906135fd565b60405180910390fd5b6124b96124b4611592565b611c7d565b565b600060019054906101000a900460ff1661250a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612501906135fd565b60405180910390fd5b8160659080519060200190612520929190612874565b508060669080519060200190612537929190612874565b505050565b600061255d8473ffffffffffffffffffffffffffffffffffffffff16611eb0565b156126c6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612586611592565b8786866040518563ffffffff1660e01b81526004016125a89493929190613327565b602060405180830381600087803b1580156125c257600080fd5b505af19250505080156125f357506040513d601f19601f820116820180604052508101906125f09190612daa565b60015b612676573d8060008114612623576040519150601f19603f3d011682016040523d82523d6000602084013e612628565b606091505b5060008151141561266e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126659061341d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126cb565b600190505b949350505050565b6060600082141561271b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061282f565b600082905060005b6000821461274d57808061273690613a37565b915050600a826127469190613828565b9150612723565b60008167ffffffffffffffff81111561276957612768613b6d565b5b6040519080825280601f01601f19166020018201604052801561279b5781602001600182028036833780820191505090505b5090505b60008514612828576001826127b491906138b3565b9150600a856127c39190613a80565b60306127cf91906137d2565b60f81b8183815181106127e5576127e4613b3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856128219190613828565b945061279f565b8093505050505b919050565b508054612840906139d4565b6000825580601f106128525750612871565b601f01602090049060005260206000209081019061287091906128fa565b5b50565b828054612880906139d4565b90600052602060002090601f0160209004810192826128a257600085556128e9565b82601f106128bb57805160ff19168380011785556128e9565b828001600101855582156128e9579182015b828111156128e85782518255916020019190600101906128cd565b5b5090506128f691906128fa565b5090565b5b808211156129135760008160009055506001016128fb565b5090565b600061292a61292584613701565b6136dc565b9050808382526020820190508285602086028201111561294d5761294c613ba1565b5b60005b8581101561299b57813567ffffffffffffffff81111561297357612972613b9c565b5b8086016129808982612ad9565b85526020850194506020840193505050600181019050612950565b5050509392505050565b60006129b86129b38461372d565b6136dc565b9050828152602081018484840111156129d4576129d3613ba6565b5b6129df848285613992565b509392505050565b60006129fa6129f58461375e565b6136dc565b905082815260208101848484011115612a1657612a15613ba6565b5b612a21848285613992565b509392505050565b600081359050612a3881614099565b92915050565b600082601f830112612a5357612a52613b9c565b5b8135612a63848260208601612917565b91505092915050565b600081359050612a7b816140b0565b92915050565b600081359050612a90816140c7565b92915050565b600081519050612aa5816140c7565b92915050565b600082601f830112612ac057612abf613b9c565b5b8135612ad08482602086016129a5565b91505092915050565b600082601f830112612aee57612aed613b9c565b5b8135612afe8482602086016129e7565b91505092915050565b600081359050612b16816140de565b92915050565b600081359050612b2b816140f5565b92915050565b600060208284031215612b4757612b46613bb0565b5b6000612b5584828501612a29565b91505092915050565b60008060408385031215612b7557612b74613bb0565b5b6000612b8385828601612a29565b9250506020612b9485828601612a29565b9150509250929050565b600080600060608486031215612bb757612bb6613bb0565b5b6000612bc586828701612a29565b9350506020612bd686828701612a29565b9250506040612be786828701612b07565b9150509250925092565b60008060008060808587031215612c0b57612c0a613bb0565b5b6000612c1987828801612a29565b9450506020612c2a87828801612a29565b9350506040612c3b87828801612b07565b925050606085013567ffffffffffffffff811115612c5c57612c5b613bab565b5b612c6887828801612aab565b91505092959194509250565b60008060408385031215612c8b57612c8a613bb0565b5b6000612c9985828601612a29565b9250506020612caa85828601612a6c565b9150509250929050565b60008060408385031215612ccb57612cca613bb0565b5b6000612cd985828601612a29565b9250506020612cea85828601612b07565b9150509250929050565b60008060408385031215612d0b57612d0a613bb0565b5b6000612d1985828601612a29565b9250506020612d2a85828601612b1c565b9150509250929050565b600060208284031215612d4a57612d49613bb0565b5b600082013567ffffffffffffffff811115612d6857612d67613bab565b5b612d7484828501612a3e565b91505092915050565b600060208284031215612d9357612d92613bb0565b5b6000612da184828501612a81565b91505092915050565b600060208284031215612dc057612dbf613bb0565b5b6000612dce84828501612a96565b91505092915050565b600080600080600060a08688031215612df357612df2613bb0565b5b600086013567ffffffffffffffff811115612e1157612e10613bab565b5b612e1d88828901612ad9565b955050602086013567ffffffffffffffff811115612e3e57612e3d613bab565b5b612e4a88828901612ad9565b9450506040612e5b88828901612a29565b9350506060612e6c88828901612a29565b9250506080612e7d88828901612b1c565b9150509295509295909350565b600060208284031215612ea057612e9f613bb0565b5b6000612eae84828501612b07565b91505092915050565b600080600060608486031215612ed057612ecf613bb0565b5b6000612ede86828701612b07565b9350506020612eef86828701612a29565b9250506040612f0086828701612b1c565b9150509250925092565b60008060408385031215612f2157612f20613bb0565b5b6000612f2f85828601612b07565b9250506020612f4085828601612b07565b9150509250929050565b612f53816138e7565b82525050565b612f62816138f9565b82525050565b6000612f738261378f565b612f7d81856137a5565b9350612f8d8185602086016139a1565b612f9681613bb5565b840191505092915050565b612faa81613980565b82525050565b6000612fbb8261379a565b612fc581856137b6565b9350612fd58185602086016139a1565b612fde81613bb5565b840191505092915050565b6000612ff48261379a565b612ffe81856137c7565b935061300e8185602086016139a1565b80840191505092915050565b60006130276032836137b6565b915061303282613bc6565b604082019050919050565b600061304a6026836137b6565b915061305582613c15565b604082019050919050565b600061306d6025836137b6565b915061307882613c64565b604082019050919050565b6000613090601c836137b6565b915061309b82613cb3565b602082019050919050565b60006130b36024836137b6565b91506130be82613cdc565b604082019050919050565b60006130d66019836137b6565b91506130e182613d2b565b602082019050919050565b60006130f96029836137b6565b915061310482613d54565b604082019050919050565b600061311c602e836137b6565b915061312782613da3565b604082019050919050565b600061313f602e836137b6565b915061314a82613df2565b604082019050919050565b6000613162603e836137b6565b915061316d82613e41565b604082019050919050565b60006131856020836137b6565b915061319082613e90565b602082019050919050565b60006131a86020836137b6565b91506131b382613eb9565b602082019050919050565b60006131cb6018836137b6565b91506131d682613ee2565b602082019050919050565b60006131ee6021836137b6565b91506131f982613f0b565b604082019050919050565b6000613211601b836137b6565b915061321c82613f5a565b602082019050919050565b6000613234602b836137b6565b915061323f82613f83565b604082019050919050565b6000613257602a836137b6565b915061326282613fd2565b604082019050919050565b600061327a602e836137b6565b915061328582614021565b604082019050919050565b600061329d6019836137b6565b91506132a882614070565b602082019050919050565b6132bc81613951565b82525050565b6132cb81613968565b82525050565b60006132dd8284612fe9565b915081905092915050565b60006132f48285612fe9565b91506133008284612fe9565b91508190509392505050565b60006020820190506133216000830184612f4a565b92915050565b600060808201905061333c6000830187612f4a565b6133496020830186612f4a565b61335660408301856132b3565b81810360608301526133688184612f68565b905095945050505050565b60006040820190506133886000830185612f4a565b61339560208301846132b3565b9392505050565b60006040820190506133b16000830185612f4a565b6133be60208301846132c2565b9392505050565b60006020820190506133da6000830184612f59565b92915050565b60006020820190506133f56000830184612fa1565b92915050565b600060208201905081810360008301526134158184612fb0565b905092915050565b600060208201905081810360008301526134368161301a565b9050919050565b600060208201905081810360008301526134568161303d565b9050919050565b6000602082019050818103600083015261347681613060565b9050919050565b6000602082019050818103600083015261349681613083565b9050919050565b600060208201905081810360008301526134b6816130a6565b9050919050565b600060208201905081810360008301526134d6816130c9565b9050919050565b600060208201905081810360008301526134f6816130ec565b9050919050565b600060208201905081810360008301526135168161310f565b9050919050565b6000602082019050818103600083015261353681613132565b9050919050565b6000602082019050818103600083015261355681613155565b9050919050565b6000602082019050818103600083015261357681613178565b9050919050565b600060208201905081810360008301526135968161319b565b9050919050565b600060208201905081810360008301526135b6816131be565b9050919050565b600060208201905081810360008301526135d6816131e1565b9050919050565b600060208201905081810360008301526135f681613204565b9050919050565b6000602082019050818103600083015261361681613227565b9050919050565b600060208201905081810360008301526136368161324a565b9050919050565b600060208201905081810360008301526136568161326d565b9050919050565b6000602082019050818103600083015261367681613290565b9050919050565b600060208201905061369260008301846132b3565b92915050565b60006040820190506136ad60008301856132b3565b6136ba60208301846132c2565b9392505050565b60006020820190506136d660008301846132c2565b92915050565b60006136e66136f7565b90506136f28282613a06565b919050565b6000604051905090565b600067ffffffffffffffff82111561371c5761371b613b6d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561374857613747613b6d565b5b61375182613bb5565b9050602081019050919050565b600067ffffffffffffffff82111561377957613778613b6d565b5b61378282613bb5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006137dd82613951565b91506137e883613951565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561381d5761381c613ab1565b5b828201905092915050565b600061383382613951565b915061383e83613951565b92508261384e5761384d613ae0565b5b828204905092915050565b600061386482613951565b915061386f83613951565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138a8576138a7613ab1565b5b828202905092915050565b60006138be82613951565b91506138c983613951565b9250828210156138dc576138db613ab1565b5b828203905092915050565b60006138f282613931565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b600061398b8261395b565b9050919050565b82818337600083830152505050565b60005b838110156139bf5780820151818401526020810190506139a4565b838111156139ce576000848401525b50505050565b600060028204905060018216806139ec57607f821691505b60208210811415613a00576139ff613b0f565b5b50919050565b613a0f82613bb5565b810181811067ffffffffffffffff82111715613a2e57613a2d613b6d565b5b80604052505050565b6000613a4282613951565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a7557613a74613ab1565b5b600182019050919050565b6000613a8b82613951565b9150613a9683613951565b925082613aa657613aa5613ae0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b6140a2816138e7565b81146140ad57600080fd5b50565b6140b9816138f9565b81146140c457600080fd5b50565b6140d081613905565b81146140db57600080fd5b50565b6140e781613951565b81146140f257600080fd5b50565b6140fe81613968565b811461410957600080fd5b5056fea2646970667358221220717a0cba21e327659eab025b459c58a8bde7b3e1b7218760413d4018b29d158e64736f6c63430008070033",
  "devdoc": {
    "author": "Trader Joe",
    "events": {
      "InitializedMintpeg(string,string,address,address,uint96)": {
        "params": {
          "_collectionName": "ERC721 name",
          "_collectionSymbol": "ERC721 symbol",
          "_feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "_projectOwner": "function caller",
          "_royaltyReceiver": "Royalty fee collector"
        }
      },
      "RoyaltyInfoChanged(address,uint96)": {
        "params": {
          "feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "royaltyReceiver": "Royalty fee collector"
        }
      },
      "TokenRoyaltyInfoChanged(uint256,address,uint96)": {
        "params": {
          "feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "royaltyReceiver": "Royalty fee collector",
          "tokenId": "Token ID royalty to be set"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Can only be called by token owner",
        "params": {
          "_tokenId": "Token ID to be burnt"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address,address,uint96)": {
        "params": {
          "_collectionName": "ERC721 name",
          "_collectionSymbol": "ERC721 symbol",
          "_feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "_royaltyReceiver": "Royalty fee collector"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(string[])": {
        "details": "Can only be called by project owner",
        "params": {
          "_tokenURIs": "Array of tokenURIs (probably IPFS) of the tokenIds to be minted"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setRoyaltyInfo(address,uint96)": {
        "details": "Can only be called by project ownerowner can prevent any sale by setting the address to any address that can't receive AVAX.",
        "params": {
          "_feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "_royaltyReceiver": "Royalty fee collector"
        }
      },
      "setTokenRoyaltyInfo(uint256,address,uint96)": {
        "details": "Can only be called by project ownerowner can prevent any sale by setting the address to any address that can't receive AVAX.",
        "params": {
          "_feePercent": "Royalty fee numerator; denominator is 10,000. So 500 represents 5%",
          "_royaltyReceiver": "Royalty fee collector",
          "_tokenId": "Token ID royalty to be set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Needs to be overridden cause two base contracts implement it",
        "params": {
          "_interfaceId": "InterfaceId to consider. Comes from type(InterfaceContract).interfaceId"
        },
        "returns": {
          "_0": "bool True if the considered interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Mintpeg Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "InitializedMintpeg(string,string,address,address,uint96)": {
        "notice": "Emmited on initialize()"
      },
      "RoyaltyInfoChanged(address,uint96)": {
        "notice": "Emmited on setRoyaltyInfo()"
      },
      "TokenRoyaltyInfoChanged(uint256,address,uint96)": {
        "notice": "Emmited on setTokenRoyaltyInfo()"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Function to burn a token"
      },
      "initialize(string,string,address,address,uint96)": {
        "notice": "Mintpeg initialization"
      },
      "mint(string[])": {
        "notice": "Function to mint new tokens"
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Function for changing royalty information"
      },
      "setTokenRoyaltyInfo(uint256,address,uint96)": {
        "notice": "Function for changing token royalty information"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns true if this contract implements the interface defined by `interfaceId`"
      }
    },
    "notice": "ERC721 contracts for artists to mint NFTs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 157,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 160,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2001,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2271,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 332,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 336,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 340,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 344,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 350,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1192,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1355,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1471,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1531,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(RoyaltyInfo)1528_storage"
      },
      {
        "astId": 1536,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1528_storage)"
      },
      {
        "astId": 1716,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2594,
        "contract": "contracts/Mintpeg.sol:Mintpeg",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)2505_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1528_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1528_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2505_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2504,
            "contract": "contracts/Mintpeg.sol:Mintpeg",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1528_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 1525,
            "contract": "contracts/Mintpeg.sol:Mintpeg",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1527,
            "contract": "contracts/Mintpeg.sol:Mintpeg",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}