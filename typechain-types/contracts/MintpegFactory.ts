/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MintpegFactoryInterface extends utils.Interface {
  functions: {
    "allMintpegs(uint256)": FunctionFragment;
    "createMintpeg(string,string,address,uint96)": FunctionFragment;
    "createdMintpegs(address,uint256)": FunctionFragment;
    "getMintpegCreatedAtIndex(address,uint256)": FunctionFragment;
    "getNumberOfMintpegsCreated(address)": FunctionFragment;
    "getTotalMintpegsCount()": FunctionFragment;
    "mintpegImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMintpegImplementation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allMintpegs"
      | "createMintpeg"
      | "createdMintpegs"
      | "getMintpegCreatedAtIndex"
      | "getNumberOfMintpegsCreated"
      | "getTotalMintpegsCount"
      | "mintpegImplementation"
      | "owner"
      | "renounceOwnership"
      | "setMintpegImplementation"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allMintpegs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMintpeg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createdMintpegs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintpegCreatedAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfMintpegsCreated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMintpegsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintpegImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMintpegImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allMintpegs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMintpeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdMintpegs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintpegCreatedAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfMintpegsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMintpegsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintpegImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintpegImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MintpegCreated(address,string,string,address,address,uint96)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMintpegImplementation(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintpegCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMintpegImplementation"): EventFragment;
}

export interface MintpegCreatedEventObject {
  mintpeg: string;
  name: string;
  symbol: string;
  projectOwner: string;
  royaltyReceiver: string;
  royaltyFee: BigNumber;
}
export type MintpegCreatedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  MintpegCreatedEventObject
>;

export type MintpegCreatedEventFilter = TypedEventFilter<MintpegCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetMintpegImplementationEventObject {
  mintpegImplementation: string;
}
export type SetMintpegImplementationEvent = TypedEvent<
  [string],
  SetMintpegImplementationEventObject
>;

export type SetMintpegImplementationEventFilter =
  TypedEventFilter<SetMintpegImplementationEvent>;

export interface MintpegFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MintpegFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allMintpegs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createMintpeg(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdMintpegs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintpegCreatedAtIndex(
      _deployer: PromiseOrValue<string>,
      _createdMintpegIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNumberOfMintpegsCreated(
      _deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalMintpegsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintpegImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintpegImplementation(
      _mintpegImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allMintpegs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createMintpeg(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _royaltyReceiver: PromiseOrValue<string>,
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdMintpegs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintpegCreatedAtIndex(
    _deployer: PromiseOrValue<string>,
    _createdMintpegIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumberOfMintpegsCreated(
    _deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalMintpegsCount(overrides?: CallOverrides): Promise<BigNumber>;

  mintpegImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintpegImplementation(
    _mintpegImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allMintpegs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createMintpeg(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createdMintpegs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintpegCreatedAtIndex(
      _deployer: PromiseOrValue<string>,
      _createdMintpegIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumberOfMintpegsCreated(
      _deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMintpegsCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintpegImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMintpegImplementation(
      _mintpegImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MintpegCreated(address,string,string,address,address,uint96)"(
      mintpeg?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      projectOwner?: PromiseOrValue<string> | null,
      royaltyReceiver?: PromiseOrValue<string> | null,
      royaltyFee?: null
    ): MintpegCreatedEventFilter;
    MintpegCreated(
      mintpeg?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      projectOwner?: PromiseOrValue<string> | null,
      royaltyReceiver?: PromiseOrValue<string> | null,
      royaltyFee?: null
    ): MintpegCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetMintpegImplementation(address)"(
      mintpegImplementation?: PromiseOrValue<string> | null
    ): SetMintpegImplementationEventFilter;
    SetMintpegImplementation(
      mintpegImplementation?: PromiseOrValue<string> | null
    ): SetMintpegImplementationEventFilter;
  };

  estimateGas: {
    allMintpegs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createMintpeg(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdMintpegs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintpegCreatedAtIndex(
      _deployer: PromiseOrValue<string>,
      _createdMintpegIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMintpegsCreated(
      _deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMintpegsCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintpegImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintpegImplementation(
      _mintpegImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allMintpegs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createMintpeg(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _royaltyReceiver: PromiseOrValue<string>,
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdMintpegs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintpegCreatedAtIndex(
      _deployer: PromiseOrValue<string>,
      _createdMintpegIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfMintpegsCreated(
      _deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMintpegsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintpegImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintpegImplementation(
      _mintpegImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
